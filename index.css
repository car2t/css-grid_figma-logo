:root {
  --c-background: rgb(223, 220, 220);
  /* Figma logo colors */
  --c-blue: rgb(19, 189, 254);
  --c-green: rgb(2, 208, 132);
  --c-red: rgb(242, 77, 24);
  --c-salmon: rgb(255, 115, 98);
  --c-violet: rgb(163, 88, 255);
  /* Pretty big size to make the logo bigger */
  --item-size: 12vmax;
  /* Easiest way to rounded a corner of a element is
  a border-radius: 50%; */
  --radius: 50%;
}

body {
  background: var(--c-background);
  height: 100vh;
  margin: 0;
  padding: 0;
  /* Center the div.container */
  display: grid;
  place-content: center;
}

/* Subtle shadows just to visualize it */
.container {
  box-shadow: 
    0px -1px 2px -1px rgba(255, 255, 255, 0.5),
    -1px 0px 2px -1px rgba(239, 239, 239, 0.7),
    1px 0px 2px -1px rgba(192, 192, 192, 0.6),
    1px 1px 5px -2px rgba(159, 159, 159, 0.8);
}

.figma-logo {
  display: grid;
  /* Create an explicit grid of 2 columns / 2 rows */
  grid-template-columns: repeat(2, var(--item-size));
  grid-template-rows: repeat(3, var(--item-size));
  /* Or you could set a size for each box 
    to get the same result with implicit rows + fr units
  */
  /* grid-template-columns: repeat(2, 1fr); */
}

/* Not necessary with a explicit grid */
/* .box {
   height: var(--item-size); 
}  */

.red {
  background: var(--c-red);
  border-radius: var(--radius) 0 0 var(--radius);
  /* 'inline-size' is a logical property.
    In language with writing mode horizontal oriented
    inline-size = width */
  inline-size: var(--item-size);
  /* width: var(--item-size); */
}

.orange {
  background: var(--c-salmon);
  border-radius: 0 var(--radius) var(--radius) 0;
  inline-size: var(--item-size);
  /* width: var(--item-size); */
}

.purple {
  background: var(--c-violet);
  border-radius: var(--radius) 0 0 var(--radius);
  inline-size: var(--item-size);
  /* width: var(--item-size); */
}

.blue {
  background: var(--c-blue);
  border-radius: var(--radius);
  inline-size: var(--item-size);
  /* width: var(--item-size); */
}

.green {
  background-color: var(--c-green);
  border-radius: var(--radius) 0 var(--radius) var(--radius);
  inline-size: var(--item-size);
  /* width: var(--item-size); */
}